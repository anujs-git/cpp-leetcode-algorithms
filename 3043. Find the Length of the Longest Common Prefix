struct TrieNode{
    TrieNode* child[10];
    bool isEnd;
    bool checkA;
    bool checkB;
    TrieNode() {
        for (int i = 0; i < 10; i++)
            child[i] = nullptr;
        isEnd = false;
        checkA=false;
        checkB=false;
    }
};

class Solution {
public:
    TrieNode* root;
    Solution() {
        root=new TrieNode();
    }
    
    void insert(string word) {
       TrieNode* node=root;
       for(int i=0;i<word.size();i++){
        char ch=word[i]-'0';
        if(node->child[ch]==nullptr){
            node->child[ch]=new TrieNode();
        }
        node=node->child[ch];
        node->checkA=true;
       }
       node->isEnd=true;
    }
    void insert2(string word) {
       TrieNode* node=root;
       for(int i=0;i<word.size();i++){
        char ch=word[i]-'0';
        if(node->child[ch]==nullptr){
            node->child[ch]=new TrieNode();
        }
        node=node->child[ch];
        node->checkB=true;
       }
       node->isEnd=true;
    }
    
    int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {
        for(int i=0;i<arr1.size();i++){
            string s=to_string(arr1[i]);
            insert(s);
        }
        for(int i=0;i<arr2.size();i++){
            insert2(to_string(arr2[i]));
        }
        int ans=0;
        TrieNode* node=root;
        dfs(node,ans,0);
        return ans;
    }

    void dfs(TrieNode* node,int& ans,int temp){
        if(node==nullptr)return;
        for(int i=0;i<=9;i++){
            if(node->child[i]!=nullptr){
                if(node->child[i]->checkA&&node->child[i]->checkB){
                    ans=max(ans,temp+1);
                    dfs(node->child[i],ans,temp+1);
                }
            }
        }
    }

};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
